% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/regconfint.R
\name{regconfint}
\alias{regconfint}
\title{Estimates bootstrap confidence interval for regularized regression}
\usage{
regconfint(
  dataset,
  expv,
  tarv,
  itr,
  al,
  sed,
  fam,
  lin,
  typ = "all",
  paral = "N"
)
}
\arguments{
\item{dataset}{A data frame containing the data used for the estimation of confidence interval. It should include both the explanatory and target variables specified in expv and tarv.}

\item{expv}{A character vector specifying the names of the explanatory variables (predictors) in the dataset.}

\item{tarv}{A character string specifying the name of the target variable (response variable) in the dataset.}

\item{itr}{An integer specifying the number of bootstrap iterations to perform.}

\item{al}{A numeric string or vector of alpha values for regularized regression: 0 corresponds to ridge regression; 1 corresponds to lasso regression; Values between 0 and 1 corresponds to elastic-net regression.}

\item{sed}{A numeric value to set the random seed for reproducibility.}

\item{fam}{A character string specifying the regression family. Supported families include "gausian", "binomial", "poisson", "multinomial", "cox", and "mgaussian." For more information, see R documentation of glmnet.}

\item{lin}{A character strig specifying the link function for the specified family.}

\item{typ}{A character string specifying the type of confidence interval to compute. Default is "all". Supported types are those provided by the boot.ci function, such as "norm", "basic", "perc", and "bca". For more information, see the R documentation of boot.}

\item{paral}{A character string ("Y" or "N") indicating whether to use parallel computation when multiple alpha values are provided for elastic-net. Default is "N".}
}
\value{
return the bootstrap confidence interval from glmnet object
}
\description{
\code{regconfint} function estimates confidence intervals for regularized regression coefficients through bootstrapping. The function supports various regression families. For elastic-net, the function supports automatic alpha selection when multiple alpha values are provided, and it also allows for parallel computation to optimize performance.
}
\examples{
#Data set creation
n <- 500
x1 <- rnorm(n, mean = 50, sd = 10)
x2 <- rnorm(n, mean = 100, sd = 15)
x3 <- rnorm(n, mean = 30, sd = 5)
x4 <- rnorm(n, mean = 70, sd = 20)
x5 <- rbinom(n, 1, 0.5)
x6 <- rbinom(n, 1, 0.3)
x7 <- rbinom(n, 1, 0.7)
x <- data.frame(x1, x2, x3, x4, x5, x6, x7)
num_var <- ncol(x)

#Binary outcome
y_1 <- 3* x1 - 2 * x2 + x3 + 0.5 * x4 + x5 * 3 + x6 * (-4) + x7 * 6 + rnorm(n, mean = 0, sd = 20)
prob <- 1 / (1 + exp(-y_1))
prob[prob>1] <- 1
prob[prob<0] <- 0
y <- rbinom(n, 1, prob)
dataset <- data.frame(x,y)
print(dataset)

#gaussian with identity-link

# Ridge regression
ridge_RD <- regconfint(dataset, expv=c("x1", "x2", "x3", "x4", "x5", "x6", "x7"), tarv="y", itr=200, al=0, sed=1234, fam="gaussian", lin="identity")

# Lasso regression
lasso_RD <- regconfint(dataset, expv=c("x1", "x2", "x3", "x4", "x5", "x6", "x7"), tarv="y", itr=200, al=1, sed=1234, fam="gaussian", lin="identity")

# Elastic-net
El_RD <- regconfint(dataset, expv=c("x1", "x2", "x3", "x4", "x5", "x6", "x7"), tarv="y", itr=200, al=seq(0.01,0.99,0.01), sed=1234, fam="gaussian",lin="identity", paral="N")

# Bias-corrected bootstrap confidence intervals for ridge
BC_CI <- bc_ci(ridge_RD,conf=0.95)
print(BC_CI)

# Percentile bootstrap confidence intervals for ridge
for (i in 1:num_var) { bt <- boot::boot.ci(ridge_RD,type="perc",index=i)
print(c("CI of variable_",i))
print(c(bt$t0,bt$percent[4:5])) }
#'
#Poisson with log-link

# Ridge regression
ridge_RR <- regconfint(dataset, expv=c("x1", "x2", "x3", "x4", "x5", "x6", "x7"), tarv="y", itr=200, al=0, sed=1234, fam="poisson", lin="log")

# Lasso regression
lasso_RR <- regconfint(dataset, expv=c("x1", "x2", "x3", "x4", "x5", "x6", "x7"), tarv="y", itr=200, al=1, sed=1234, fam="poisson", lin="log")
# Elastic-net
El_RR <- regconfint(dataset, expv=c("x1", "x2", "x3", "x4", "x5", "x6", "x7"), tarv="y", itr=200, al=seq(0.01,0.99,0.01), sed=1234, fam="poisson",lin="log", paral="N")

# If paral = "Y", parallel computing will be implemented based on the number of cores available in your computer

# Bias-corrected bootstrap confidence intervals for ridge
BC_CI <- bc_ci(ridge_RR,conf=0.95)
print(BC_CI)

# Percentile bootstrap confidence intervals for ridge
# For other types of confidence intervals, modify the type argument. For more details, please see the instruction of boot pakage
for (i in 1:num_var) { bt <- boot::boot.ci(ridge_RR,type="perc",index=i)
print(c("CI of variable_",i))
print(c(bt$t0,bt$percent[4:5])) }

}
